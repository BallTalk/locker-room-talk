
spring:
  application:
    name: locker-room-talk
  profiles:
    active: local
  config:
    import:
      - optional:file:./.env[.properties]  # 로컬 실행(bootRun/IDE) 시 프로젝트 루트의 .env
      - optional:file:../.env[.properties] # 테스트 실행(JUnit) 시 모듈 상위의 .env
  datasource:
    url: ${DB_URL}
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
    name: lockerRoomTalkDataSource
    type: com.zaxxer.hikari.HikariDataSource
    hikari:
      maximum-pool-size: 3
      connection-timeout: 10000
      max-lifetime: 60000
    driver-class-name: com.mysql.cj.jdbc.Driver
  sql:
    init:
      mode: always
      schema-locations: classpath:sql/schema.sql
      data-locations: classpath:sql/data.sql
  jpa:
    open-in-view: false
    generate-ddl: false
    show-sql: false
    hibernate:
      ddl-auto: none
    properties:
      hibernate.timezone.default_storage: NORMALIZE_UTC
      hibernate.jdbc.time_zone: UTC
      hibernate.hbm2ddl.schema-generation.foreign-key-handling-mode: skip
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}
            scope:
              - openid
              - profile
              - email
            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"

          kakao:
            client-id: ${KAKAO_CLIENT_ID}
            client-secret: ${KAKAO_CLIENT_SECRET}
            client-authentication-method: post
            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
            scope: [ account_email, profile_nickname, profile_image ]
            authorization-grant-type: authorization_code
        provider:
          google:
            authorization-uri: https://accounts.google.com/o/oauth2/v2/auth
            token-uri: https://oauth2.googleapis.com/token
            user-info-uri: https://www.googleapis.com/oauth2/v3/userinfo
            user-name-attribute: sub
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id

---

jwt:
  secret: ${JWT_SECRET}
  expiration-ms: ${JWT_EXPIRATION_MS}

cors:
  allowed-origins: http://localhost:3000

logging:
  level:
    root: INFO
    org.springframework: WARN
    org.hibernate.SQL: DEBUG
    org.springframework.boot.autoconfigure.sql.init.ScriptDatabaseInitializer: DEBUG
    org.springframework.jdbc.datasource.init.ScriptUtils: DEBUG

coolsms:
  api:
    key: ${COOLSMS_API_KEY}
    secret: ${COOLSMS_API_SECRET}
    url: ${COOLSMS_URL}
  sender :
    phone-number: ${COOLSMS_SENDER_PHONE_NUMBER}

plugins {
    id 'java'
    id 'jacoco'
}

group = 'com.locker'
version = '0.0.1-SNAPSHOT'

jacoco {
    toolVersion = "${libs.versions.jacoco.get()}"
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(libs.versions.java.get().toInteger())
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation platform("org.springframework.boot:spring-boot-dependencies:${libs.versions.boot.get()}")
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation "org.redisson:redisson-spring-boot-starter:${libs.versions.redisson.get()}"
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    runtimeOnly 'com.mysql:mysql-connector-j'

    implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:${libs.versions.springdoc.get()}"

    compileOnly "org.projectlombok:lombok:${libs.versions.lombok.get()}"
    annotationProcessor "org.projectlombok:lombok:${libs.versions.lombok.get()}"

    implementation "com.querydsl:querydsl-jpa:${libs.versions.querydsl.get()}:jakarta"
    annotationProcessor "com.querydsl:querydsl-apt:${libs.versions.querydsl.get()}:jakarta"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api:${libs.versions.jakarta.persistence.get()}"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api:${libs.versions.jakarta.annotation.get()}"

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testCompileOnly "org.projectlombok:lombok:${libs.versions.lombok.get()}"
    testAnnotationProcessor "org.projectlombok:lombok:${libs.versions.lombok.get()}"
}

sourceSets {
    main {
        java {
            srcDir("$buildDir/generated/sources/annotationProcessor/java/main")
        }
    }
}

tasks.register('cleanQuerydsl', Delete) {
    delete = layout.buildDirectory.dir("generated/sources/annotationProcessor/java/main")
}

tasks.named('clean') {
    dependsOn 'cleanQuerydsl'
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        csv.required = false
        html.required = true
    }
}

tasks.named('test') {
    useJUnitPlatform()
}
